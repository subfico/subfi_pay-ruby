=begin
#Subfi Pay API

#API for Subfi Pay services

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module SubfiPay
  class CheckoutTemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new checkout template
    # @param x_api_version [String] 
    # @param checkout_template_create_request [CheckoutTemplateCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CheckoutTemplateResponse]
    def create_checkout_template(x_api_version, checkout_template_create_request, opts = {})
      data, _status_code, _headers = create_checkout_template_with_http_info(x_api_version, checkout_template_create_request, opts)
      data
    end

    # Create a new checkout template
    # @param x_api_version [String] 
    # @param checkout_template_create_request [CheckoutTemplateCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckoutTemplateResponse, Integer, Hash)>] CheckoutTemplateResponse data, response status code and response headers
    def create_checkout_template_with_http_info(x_api_version, checkout_template_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutTemplatesApi.create_checkout_template ...'
      end
      # verify the required parameter 'x_api_version' is set
      if @api_client.config.client_side_validation && x_api_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_version' when calling CheckoutTemplatesApi.create_checkout_template"
      end
      # verify the required parameter 'checkout_template_create_request' is set
      if @api_client.config.client_side_validation && checkout_template_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_template_create_request' when calling CheckoutTemplatesApi.create_checkout_template"
      end
      # resource path
      local_var_path = '/checkout_templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end
      header_params[:'X-Api-Version'] = x_api_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(checkout_template_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :operation => :"CheckoutTemplatesApi.create_checkout_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutTemplatesApi#create_checkout_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a render token for checkout template
    # @param x_api_version [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TokenResponse]
    def create_render_token(x_api_version, id, opts = {})
      data, _status_code, _headers = create_render_token_with_http_info(x_api_version, id, opts)
      data
    end

    # Create a render token for checkout template
    # @param x_api_version [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenResponse, Integer, Hash)>] TokenResponse data, response status code and response headers
    def create_render_token_with_http_info(x_api_version, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutTemplatesApi.create_render_token ...'
      end
      # verify the required parameter 'x_api_version' is set
      if @api_client.config.client_side_validation && x_api_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_version' when calling CheckoutTemplatesApi.create_render_token"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CheckoutTemplatesApi.create_render_token"
      end
      # resource path
      local_var_path = '/checkout_templates/{id}/token'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Api-Version'] = x_api_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :operation => :"CheckoutTemplatesApi.create_render_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutTemplatesApi#create_render_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a checkout template by ID
    # @param x_api_version [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CheckoutTemplateResponse]
    def get_checkout_template(x_api_version, id, opts = {})
      data, _status_code, _headers = get_checkout_template_with_http_info(x_api_version, id, opts)
      data
    end

    # Retrieve a checkout template by ID
    # @param x_api_version [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckoutTemplateResponse, Integer, Hash)>] CheckoutTemplateResponse data, response status code and response headers
    def get_checkout_template_with_http_info(x_api_version, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutTemplatesApi.get_checkout_template ...'
      end
      # verify the required parameter 'x_api_version' is set
      if @api_client.config.client_side_validation && x_api_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_version' when calling CheckoutTemplatesApi.get_checkout_template"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CheckoutTemplatesApi.get_checkout_template"
      end
      # resource path
      local_var_path = '/checkout_templates/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Api-Version'] = x_api_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :operation => :"CheckoutTemplatesApi.get_checkout_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutTemplatesApi#get_checkout_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all checkout templates
    # @param x_api_version [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of results to retrieve.
    # @option opts [Integer] :per_page Number of results per page.
    # @option opts [String] :account_id 
    # @return [ListCheckoutTemplatesResponse]
    def list_checkout_templates(x_api_version, opts = {})
      data, _status_code, _headers = list_checkout_templates_with_http_info(x_api_version, opts)
      data
    end

    # List all checkout templates
    # @param x_api_version [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page of results to retrieve.
    # @option opts [Integer] :per_page Number of results per page.
    # @option opts [String] :account_id 
    # @return [Array<(ListCheckoutTemplatesResponse, Integer, Hash)>] ListCheckoutTemplatesResponse data, response status code and response headers
    def list_checkout_templates_with_http_info(x_api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutTemplatesApi.list_checkout_templates ...'
      end
      # verify the required parameter 'x_api_version' is set
      if @api_client.config.client_side_validation && x_api_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_version' when calling CheckoutTemplatesApi.list_checkout_templates"
      end
      # resource path
      local_var_path = '/checkout_templates'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Api-Version'] = x_api_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCheckoutTemplatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :operation => :"CheckoutTemplatesApi.list_checkout_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutTemplatesApi#list_checkout_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
