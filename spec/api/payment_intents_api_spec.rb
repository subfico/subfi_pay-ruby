=begin
#SubFi Pay API

#API for SubFi Pay services

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for SubfiPay::PaymentIntentsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PaymentIntentsApi' do
  let(:api_instance) { SubfiPay::PaymentIntentsApi.new }
  let(:api_key) { Faker::Alphanumeric.alphanumeric(number: 32) }
  let(:api_version) { "0.1.0" }
  let(:account_id) { Faker::Alphanumeric.alphanumeric(number: 32) }
  let(:config) do
    api_instance.api_client.config.tap do |c|
      c.api_key['X-Api-Key'] = api_key
      c.host = "localhost:3000"
      c.scheme = "http"
    end
  end
  let(:path) { "/payment_intents" }
  let(:request_headers) do
    {
      'Accept'        =>  'application/json',
      "Content-Type"  => "application/json",
      'X-Api-Version' => api_version,
      'X-Api-Key' => api_key
    }
  end
  let(:response_headers) do
    {
      'Accept'        =>  'application/json',
      "Content-Type"  => "application/json"
    }
  end

  describe 'test an instance of PaymentIntentsApi' do
    it 'should create an instance of PaymentIntentsApi' do
      expect(api_instance).to be_instance_of(SubfiPay::PaymentIntentsApi)
    end
  end

  # unit tests for confirm_payment_intent
  # Confirm a payment intent
  # @param x_api_version
  # @param id The ID of the payment intent to confirm
  # @param [Hash] opts the optional parameters
  # @return [PaymentIntentResponse]
  describe 'confirm_payment_intent test' do
    let(:payment_intent_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    before do
      stub_request(:post, [config.host, "#{path}/#{payment_intent_id}/confirm"].join)
      .with(headers: request_headers)
      .to_return(
        status: 200,
        body: fixture("payment_intents/confirm_200.json"),
        headers: response_headers
      )
    end

    it 'should work' do
      res = api_instance.confirm_payment_intent(api_version, account_id, payment_intent_id)

      expect(res).to be_instance_of(SubfiPay::PaymentIntentResponse)
    end
  end

  # unit tests for capture_payment_intent
  # Capture a payment intent
  # @param x_api_version
  # @param id The ID of the payment intent to capture
  # @param [Hash] opts the optional parameters
  # @return [PaymentIntentResponse]
  describe 'capture_payment_intent test' do
    let(:payment_intent_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    before do
      stub_request(:post, [config.host, "#{path}/#{payment_intent_id}/capture"].join)
        .with(headers: request_headers)
        .to_return(
          status: 200,
          body: fixture("payment_intents/capture_200.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.capture_payment_intent(api_version, account_id, payment_intent_id)

      expect(res).to be_instance_of(SubfiPay::PaymentIntentResponse)
    end
  end

  # unit tests for cancel_payment_intent
  # Cancel a payment intent
  # @param x_api_version
  # @param id The ID of the payment intent to cancel
  # @param [Hash] opts the optional parameters
  # @return [PaymentIntentResponse]
  describe 'cancel_payment_intent test' do
    let(:payment_intent_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    before do
      stub_request(:post, [config.host, "#{path}/#{payment_intent_id}/cancel"].join)
        .with(headers: request_headers)
        .to_return(
          status: 200,
          body: fixture("payment_intents/cancel_200.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.cancel_payment_intent(api_version, account_id, payment_intent_id)

      expect(res).to be_instance_of(SubfiPay::PaymentIntentResponse)
    end
  end

  # unit tests for create_payment_intent
  # Create a new payment intent
  # @param x_api_version
  # @param payment_intent_attributes
  # @param [Hash] opts the optional parameters
  # @return [PaymentIntentResponse]
  describe 'create_payment_intent test' do
    let(:body) do
      {
        payment_intent: {
          amount: Faker::Number.number(digits: 4),
          capture_async: false
        }
      }
    end

    before do
      stub_request(:post, [config.host, path].join)
        .with(headers: request_headers)
        .to_return(
          status: 200,
          body: fixture("payment_intents/create_201.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.create_payment_intent(api_version, account_id, body)

      expect(res).to be_instance_of(SubfiPay::PaymentIntentResponse)
    end
  end

  # unit tests for get_payment_intent
  # Retrieve a payment intent by ID
  # @param x_api_version
  # @param id The ID of the payment intent to retrieve
  # @param [Hash] opts the optional parameters
  # @return [PaymentIntentResponse]
  describe 'get_payment_intent test' do
    let(:payment_intent_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    before do
      stub_request(:get, [config.host, "#{path}/#{payment_intent_id}"].join)
      .with(headers: request_headers)
      .to_return(
        status: 200,
         body: fixture("payment_intents/fetch_200.json"),
         headers: response_headers
         )
    end

    it 'should work' do
      res = api_instance.get_payment_intent(api_version, account_id, payment_intent_id)

      expect(res).to be_instance_of(SubfiPay::PaymentIntentResponse)
    end
  end

  # unit tests for list_payment_intents
  # List payment intents
  # @param x_api_version
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The page of results to retrieve.
  # @option opts [Integer] :per_page Number of results per page.
  # @return [ListPaymentIntentsResponse]
  describe 'list_payment_intents test' do
    before do
      stub_request(:get, [config.host, path].join)
      .with(headers: request_headers)
      .to_return(
        status: 200,
         body: fixture("payment_intents/list_200.json"),
         headers: response_headers
      )
    end

    it 'should work' do
      res = api_instance.list_payment_intents(api_version, account_id)

      expect(res).to be_instance_of(SubfiPay::ListPaymentIntentsResponse)
    end
  end

  # unit tests for update_payment_intent
  # Update a payment intent
  # @param x_api_version
  # @param id The ID of the payment intent to update
  # @param update_payment_intent_request
  # @param [Hash] opts the optional parameters
  # @return [PaymentIntentResponse]
  describe 'update_payment_intent test' do
    let(:payment_intent_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    let(:body) do
      {
        payment_intent: {
          payment_method_ids: %w(1 2 3)
        }
      }
    end

    before do
      stub_request(:patch, [config.host, "#{path}/#{payment_intent_id}"].join)
        .with(headers: request_headers, body:)
        .to_return(
          status: 200,
            body: fixture("payment_intents/update_200.json"),
            headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.update_payment_intent(api_version, account_id, payment_intent_id, body)

      expect(res).to be_instance_of(SubfiPay::PaymentIntentResponse)
    end
  end
end
