=begin
#SubFi Pay API

#API for SubFi Pay services

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for SubfiPay::WebhookEndpointsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'WebhookEndpointsApi' do
  let(:api_instance) { SubfiPay::WebhookEndpointsApi.new }
  let(:api_key) { Faker::Alphanumeric.alphanumeric(number: 32) }
  let(:api_version) { SubfiPay::VERSION }
  let(:config) do
    api_instance.api_client.config.tap do |c|
      c.api_key['X-Api-Key'] = api_key
      c.host = "localhost:3000"
      c.scheme = "http"
    end
  end
  let(:path) { "/webhook_endpoints" }
  let(:request_headers) do
    {
      "Content-Type"  => "application/json",
      'X-Api-Version' => api_version,
      'X-Api-Key' => api_key,
      'Expect' => '',
    }
  end
  let(:response_headers) do
    {
      'Accept'        =>  'application/json',
      "Content-Type"  => "application/json"
    }
  end

  describe 'test an instance of WebhookEndpointsApi' do
    it 'should create an instance of WebhookEndpointsApi' do
      expect(api_instance).to be_instance_of(SubfiPay::WebhookEndpointsApi)
    end
  end

  # unit tests for create_webhook_endpoint
  # Create a webhook endpoint
  # @param x_api_version
  # @param create_webhook_endpoint_request
  # @param [Hash] opts the optional parameters
  # @return [WebhookEndpointResponse]
  describe 'create_webhook_endpoint test' do
    let(:body) do
      {
        webhook_endpoint: {
          url: Faker::Internet.url,
          enabled_events: %w(payment_intent.created payment_intent.succeeded)
        }
      }
    end

    before do
      stub_request(:post, [config.host, path].join)
        .with(headers: request_headers)
        .to_return(
          status: 200,
          body: fixture("webhook_endpoints/create_201.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.create_webhook_endpoint(api_version, body)

      expect(res).to be_instance_of(SubfiPay::WebhookEndpointResponse)
    end
  end

  # unit tests for delete_webhook_endpoint
  # Delete a webhook endpoint by ID
  # @param x_api_version
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_webhook_endpoint test' do
    let(:webhook_endpoint_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    before do
      stub_request(:delete, [config.host, "#{path}/#{webhook_endpoint_id}"].join)
        .with(headers: request_headers)
        .to_return(
          status: 204,
          body: "",
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.delete_webhook_endpoint(api_version, webhook_endpoint_id)

      expect(res).to be_nil
    end
  end

  # unit tests for get_webhook_endpoint
  # Retrieve a webhook endpoint by ID
  # @param x_api_version
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [WebhookEndpointResponse]
  describe 'get_webhook_endpoint test' do
    let(:webhook_endpoint_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    before do
      stub_request(:get, [config.host, "#{path}/#{webhook_endpoint_id}"].join)
        .with(headers: request_headers)
        .to_return(
          status: 200,
          body: fixture("webhook_endpoints/show_200.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.get_webhook_endpoint(api_version, webhook_endpoint_id)

      expect(res).to be_instance_of(SubfiPay::WebhookEndpointResponse)
    end
  end

  # unit tests for list_webhook_endpoints
  # List all webhook endpoints
  # @param x_api_version
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The page of results to retrieve.
  # @option opts [Integer] :per_page Number of results per page.
  # @return [ListWebhookEndpointsResponse]
  describe 'list_webhook_endpoints test' do
    before do
      stub_request(:get, [config.host, path].join)
        .with(headers: request_headers)
        .to_return(
          status: 200,
          body: fixture("webhook_endpoints/list_200.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.list_webhook_endpoints(api_version)

      expect(res).to be_instance_of(SubfiPay::ListWebhookEndpointsResponse)
    end
  end

  # unit tests for update_webhook_endpoint
  # Update a webhook endpoint by ID
  # @param x_api_version
  # @param id
  # @param create_webhook_endpoint_request
  # @param [Hash] opts the optional parameters
  # @return [WebhookEndpointResponse]
  describe 'update_webhook_endpoint test' do
    let(:webhook_endpoint_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    let(:body) do
      {
        webhook_endpoint: {
          url: Faker::Internet.url,
          enabled_events: %w(payment_intent.created payment_intent.succeeded)
        }
      }
    end

    before do
      stub_request(:put, [config.host, "#{path}/#{webhook_endpoint_id}"].join)
        .with(headers: request_headers, body:)
        .to_return(
          status: 200,
          body: fixture("webhook_endpoints/update_200.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.update_webhook_endpoint(api_version, webhook_endpoint_id, body)

      expect(res).to be_instance_of(SubfiPay::WebhookEndpointResponse)
    end
  end
end
