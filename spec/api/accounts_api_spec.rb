=begin
#SubFi Pay API

#API for SubFi Pay services

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for SubfiPay::AccountsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AccountsApi' do
  let(:api_instance) { SubfiPay::AccountsApi.new }
  let(:api_key) { Faker::Alphanumeric.alphanumeric(number: 32) }
  let(:api_version) { "0.1.0" }
  let(:account_id) { Faker::Alphanumeric.alphanumeric(number: 32) }
  let(:config) do
    api_instance.api_client.config.tap do |c|
      c.api_key['X-Api-Key'] = api_key
      c.host = "localhost:3000"
      c.scheme = "http"
    end
  end
  let(:path) { "/accounts" }
  let(:request_headers) do
    {
      'Accept'        =>  'application/json',
      "Content-Type"  => "application/json",
      'X-Api-Version' => api_version,
      'X-Api-Key' => api_key
    }
  end
  let(:response_headers) do
    {
      'Accept'        =>  'application/json',
      "Content-Type"  => "application/json"
    }
  end

  describe 'test an instance of AccountsApi' do
    it 'should create an instance of AccountsApi' do
      expect(api_instance).to be_instance_of(SubfiPay::AccountsApi)
    end
  end

  # unit tests for create_account
  # Create a new account
  # @param x_api_version
  # @param x_account_id
  # @param create_account_request
  # @param [Hash] opts the optional parameters
  # @return [AccountResponse]
  describe 'create_account test' do
    let(:body) do
      {
        account: {
          name: Faker::Name.name,
          email: Faker::Internet.email
        }
      }
    end

    before do
      stub_request(:post, [config.host, path].join)
        .with(headers: request_headers, body: body.to_json)
        .to_return(
          status: 201,
          body: fixture("accounts/create_201.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.create_account(api_version, body)

      expect(res).to be_instance_of(SubfiPay::AccountResponse)
    end
  end

  # unit tests for get_account
  # Retrieve an account by ID
  # @param x_api_version
  # @param x_account_id
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [AccountResponse]
  describe 'get_account test' do
    let(:account_id) { Faker::Alphanumeric.alphanumeric(number: 32) }

    before do
      stub_request(:get, [config.host, "#{path}/#{account_id}"].join)
        .with(headers: request_headers)
        .to_return(
          status: 200,
          body: fixture("accounts/show_200.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.get_account(api_version, account_id)

      expect(res).to be_instance_of(SubfiPay::AccountResponse)
    end
  end

  # unit tests for list_accounts
  # List all accounts
  # @param x_api_version
  # @param x_account_id
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The page of results to retrieve.
  # @option opts [Integer] :per_page Number of results per page.
  # @return [ListAccountsResponse]
  describe 'list_accounts test' do
    let(:page) { 1 }
    let(:per_page) { 10 }

    before do
      stub_request(:get, [config.host, path].join)
        .with(
          headers: request_headers,
          query: { page: page, per_page: per_page }
        )
        .to_return(
          status: 200,
          body: fixture("accounts/list_200.json"),
          headers: response_headers
        )
    end

    it 'should work' do
      res = api_instance.list_accounts(api_version, page: page, per_page: per_page)

      expect(res).to be_instance_of(SubfiPay::ListAccountsResponse)
    end
  end
end
